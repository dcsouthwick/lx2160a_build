From 828f8da93793da0c83a1db53c81121b90d5ada00 Mon Sep 17 00:00:00 2001
From: Rabeeh Khoury <rabeeh@solid-run.com>
Date: Tue, 30 Nov 2021 13:53:00 +0200
Subject: [PATCH] lx2160acex7: correctly set dt, and add retimer

1. Correctly set device tree for multi dtb support
2. Setup the single retimer device in the SolidNet carrier board

Signed-off-by: Rabeeh Khoury <rabeeh@solid-run.com>
---
 board/solidrun/lx2160a/eth_lx2160acex7.c | 91 ++++++++++++++++++++++--
 1 file changed, 86 insertions(+), 5 deletions(-)

diff --git a/board/solidrun/lx2160a/eth_lx2160acex7.c b/board/solidrun/lx2160a/eth_lx2160acex7.c
index eddc449bcd..abca006d22 100644
--- a/board/solidrun/lx2160a/eth_lx2160acex7.c
+++ b/board/solidrun/lx2160a/eth_lx2160acex7.c
@@ -115,6 +115,61 @@ void setup_retimer_25g(int chnum)
 	}
 }
 
+void setup_retimer_lx2162_25g(int speed_is_25g)
+{
+	int i, ret;
+	u8 reg;
+	struct udevice *dev;
+
+	select_i2c_ch_pca9547(0xb); /* SMB_CLK / DATA interface */
+	/*
+	 * Retimer on address 0x22; first two channels are LX TX.
+	 */
+	ret = i2c_get_chip_for_busnum(0, 0x22, 1, &dev);
+	if (ret) {
+		/*
+		 * On HoneyComb and ClearFog CX ver 1.1 / 1.2 there is no retimer
+		 * assembled; silently return.
+		 */
+		return;
+	}
+	ret = dm_i2c_read(dev, 0xf1, &reg, 1); /* Get full device ID */
+	if (ret) {
+		printf ("ERROR: Could not get retimer device ID\n");
+		return;
+	}
+	if (reg != 0x10) {
+		printf ("ERROR : DS250DF410 retimer not found\n");
+		return;
+	}
+	printf ("Setting up retimer channels as %s\n",speed_is_25g?"25Gbps":"10Gbps");
+
+	dm_i2c_reg_write(dev, 0xff, 0x1); /* Enable channel specific access */
+	/*
+	 * Setup 25Gbps channel on 0..chnum.
+	 * Notice that the ingress retimer is mirrorly mapped with the SERDES
+	 * number, so SERDES #0 is connected to channel #3, SERDES 1 to channel
+	 * #2 ...
+	 */
+	if (speed_is_25g) for (i = 0 ; i < 4; i++) { /* Setup all channels as 25g */
+			dm_i2c_reg_write(dev, 0xfc, 1 << i);
+			dm_i2c_reg_write(dev, 0x00, 0x4); /* Reset channel registers */
+			dm_i2c_reg_write(dev, 0x0a, 0xc); /* Assert CDR reset */
+			dm_i2c_reg_write(dev, 0x3d, 0x8f); /* Enable pre/post and set main cursor to 0xf */
+			dm_i2c_reg_write(dev, 0x3e, 0x44); /* Set pre-cursor to -4 */
+			/* Set post-cursor of channel #0 to -4 */
+			dm_i2c_reg_write(dev, 0x3f, 0x44);
+			dm_i2c_reg_write(dev, 0x0a, 0x00); /* Release CDR */
+		}
+	else for (i = 0 ; i < 4; i++) {
+			dm_i2c_reg_write(dev, 0xfc, 1 << i);
+			dm_i2c_reg_write(dev, 0x00, 0x4); /* Reset channel registers */
+			dm_i2c_reg_write(dev, 0x0a, 0xc); /* Assert CDR reset */
+			dm_i2c_reg_write(dev, 0x2f, 0x04); /* Set rate to 10.3125 Gbps */
+			dm_i2c_reg_write(dev, 0x0a, 0x00); /* Release CDR */
+		}
+}
+
 #if defined(CONFIG_RESET_PHY_R)
 void reset_phy(void)
 {
@@ -153,15 +208,18 @@ static struct serdes_configuration {
 	bool dts_needed;
 } supported_protocols[] = {
 	/* Serdes block #1 */
+	{1, 0, false},
 	{1, 2, true},
 	{1, 3, true},
 	{1, 8, true},
 	{1, 15, true},
 	{1, 17, true},
 	{1, 18, true},
+	{1, 19, true},
 	{1, 20, true},
 
 	/* Serdes block #2 */
+	{2, 0, false},
 	{2, 2, false},
 	{2, 3, false},
 	{2, 5, false},
@@ -208,12 +266,14 @@ static void get_str_protocol(u8 serdes_block, u32 protocol, char *str)
 int board_fit_config_name_match(const char *name)
 {
 	if (get_svr() & 0x800) {
-		if (strncmp(name, "fsl-lx2162-som", 14)) return 1;
+		if (!strncmp(name, "fsl-lx2162a-som", 15)) {
+			return 0;
+		}
 	} else {
-		if (strncmp(name, "fsl-lx2160a-cex7", 16)) return 1;
+		if (!strncmp(name, "fsl-lx2160a-cex7", 16)) return 0;
 	}
 
-	return 0;
+	return -1;
 }
 
 int fsl_board_late_init(void) {
@@ -223,6 +283,7 @@ int fsl_board_late_init(void) {
 	u32 srds_s1, srds_s2;
 	char expected_dts[100];
 
+	printf ("fsl_board_late_init\n");
 	if (env_get("fdtfile"))
 		return 0;
 
@@ -238,13 +299,33 @@ int fsl_board_late_init(void) {
 	 */
 	if (!protocol_supported(1, srds_s1) ||
 	    !protocol_supported(2, srds_s2))
-		return -1;
+		return 0;
 
 	get_str_protocol(1, srds_s1, srds_s1_str);
 	get_str_protocol(2, srds_s2, srds_s2_str);
 
 	if (get_svr() & 0x800) { /* LX2162A SOM variants */
-		sprintf(expected_dts, "fsl-lx2162a-som-%s-%s.dtb",
+		switch (srds_s1) {
+			case 8:
+				setup_retimer_lx2162_25g(0);
+				break;
+			case 15:
+			case 16:
+			case 17:
+			case 18:
+			case 19:
+			case 21:
+				/* Setup 25gb retimer on lanes e,f,g,h */
+				setup_retimer_lx2162_25g(1);
+				break;
+			default:
+				printf("SerDes1 protocol 0x%x is not supported on LX2160A-SOM\n",
+				       srds_s1);
+		}
+		if ((srds_s1 == 18) && ((srds_s2 == 2) || (srds_s2 == 3)))
+			/* SolidNet device tree */
+			sprintf(expected_dts, "fsl-lx2162a-solidnet.dtb");
+		else sprintf(expected_dts, "fsl-lx2162a-som-%s-%s.dtb",
 			srds_s1_str, srds_s2_str);
 	} else {
 		switch (srds_s1) {
-- 
2.25.1

